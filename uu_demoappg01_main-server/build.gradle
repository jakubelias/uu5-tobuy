description 'A template project used for implementing uuApp server.'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "com.sourcemuse.mongo"
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'build-dashboard'
apply plugin: 'project-report'
apply plugin: 'uu.appg01'

// repositories setup
repositories {
  maven { url uuProdRepository }
  maven { url uuBetaRepository }
  //TODO Only for development remove during release
  maven { url "http://192.168.4.209:8081/nexus/content/repositories/uaf-dev/" }
}

// publishing to maven repositories
task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
  from javadoc.destinationDir
  classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: 'classes') {
  from sourceSets.main.allSource
  classifier = 'sources'
}
task packageTests(type: Jar, dependsOn: 'testClasses') {
  from sourceSets.test.output
  classifier = 'tests'
}
task packageTestSources(type: Jar, dependsOn: 'testClasses') {
  from sourceSets.test.allSource
  classifier = 'testSources'
}
task packageReports(type: Zip, dependsOn: 'uuReport') {
  classifier = "reports"
  from new File(buildDir.path, "reports")
}

artifacts {
  archives packageJavadoc
  archives packageSources
  archives packageTests
  archives packageTestSources
  archives packageReports
}

uploadArchives {
  repositories.mavenDeployer {
    repository(url: uuDevReleaseRepository)
    snapshotRepository(url: uuDevSprintRepository)

    def notPublishList = []
    archivesToPublish.each { k, v -> if (!v) notPublishList << k }
    addFilter('filter') { artifact, file ->
      !(artifact.attributes.classifier in notPublishList)
    }
    pom('filter').withXml(dependencyManagement.pomConfigurer)
  }
}

// java properties setup
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:Brussels-SR2'
    mavenBom 'org.apache.logging.log4j:log4j-bom:2.8.2'
  }
}

ext {
  uuAppg01ServerVersion = "1.1.0-SNAPSHOT"
}

configurations {
  all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
//  compile project(':uu_demoappg01_main-client')

  compile("org.springframework.boot:spring-boot-starter-log4j2")
  compile("uu.appg01.server-server:uu_appg01_server-server:${uuAppg01ServerVersion}")
  compile "net.minidev:json-smart:2.2.1"
  compile group: 'org.modelmapper', name: 'modelmapper', version: '1.1.0'

  testCompile("uu.appg01.core-server-java:uu_appg01_core-test_support:${uuAppg01ServerVersion}")
}

bootRepackage {
  enabled = false
}

bootRun {
  systemProperties = [
    'staticResource.location': 'file:./public/'
  ]
}
task uuRun(group: "uu", dependsOn: bootRun)

// testing with embedded MongoDb
mongo {
  System.setProperty("os.arch", "x86_64")
  //workarround for https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo/issues/167
  mongoVersion '3.4.3'
}

test {
  runWithMongoDb = true
}

// reports setup
buildDashboard {
  dependsOn(jacocoTestReport)
}

checkstyle {
  configFile = rootProject.file('config/checkstyle.xml')
  ignoreFailures = true
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled false
  }
}

task uuReport {
  group 'uu'
  buildDashboard.mustRunAfter check, jacocoTestReport
  dependsOn 'test', 'jacocoTestReport', 'check', 'buildDashboard'
}

// deployment to C3
war {
  archiveName = project.name + '.war'
  from('public') {
    into('WEB-INF/classes/public')
  }
}

uuDeploySettings {
  appBoxLocationUri = project.uuCloudAppBoxLocationUri
  resourcePoolUri = project.uuCloudResourcePoolUri
  shares = project.uuCloudShares
  if (project.hasProperty('uuCloudDeployParams') && project.uuCloudDeployParams) {
    deployConfig = project.uuCloudDeployParams
  }
}

// mapping and persistence json generation
task generateMappingJson(type: JavaExec) {
  main = 'uu.app.server.internal.generator.CommandMappingGenerator'
  classpath = sourceSets.main.runtimeClasspath
  args = ["-bp", "${uuSubAppPackageName},uu.app.workspace,uu.app.binarystore", "-vuc", "config/mapping-vuc.json", "-out", "${projectDir}/config/mapping.json"]
}

task copyMappingJsonToResources(type: Copy) {
  from "${projectDir}/config/mapping.json"
  into "${buildDir}/resources/main/config/"
}


task generatePersistenceJson(type: JavaExec) {
  main = 'uu.app.datastore.schema.PersistenceSchemaRunner'
  classpath = sourceSets.main.runtimeClasspath
  args = ["-bp", "${uuSubAppPackageName},uu.app.datastore,uu.app.objectstore,uu.app.binarystore,uu.app.workspace", "-out", "config/persistence.json"]
}

processResources.doLast {
  tasks.generateMappingJson.execute()
  tasks.copyMappingJsonToResources.execute()
  tasks.generatePersistenceJson.execute()
}
