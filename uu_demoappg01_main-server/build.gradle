description 'A template project used for implementing uuApp server.'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "com.sourcemuse.mongo"
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'build-dashboard'
apply plugin: 'project-report'
apply plugin: 'uu.appg01'

// repositories setup
repositories {
  maven { url uuProdRepository }
  maven { url uuBetaRepository }
}

// publishing to maven repositories
task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
  from javadoc.destinationDir
  classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: 'classes') {
  from sourceSets.main.allSource
  classifier = 'sources'
}
task packageTests(type: Jar, dependsOn: 'testClasses') {
  from sourceSets.test.output
  classifier = 'tests'
}
task packageTestSources(type: Jar, dependsOn: 'testClasses') {
  from sourceSets.test.allSource
  classifier = 'testSources'
}
task packageReports(type: Zip, dependsOn: 'uuReport') {
  classifier = "reports"
  from new File(buildDir.path, "reports")
}

artifacts {
  archives packageJavadoc
  archives packageSources
  archives packageTests
  archives packageTestSources
  archives packageReports
}

uploadArchives {
  repositories.mavenDeployer {
    repository(url: uuDevReleaseRepository)
    snapshotRepository(url: uuDevSprintRepository)

    def notPublishList = []
    artifactsToPublish.each { k, v -> if (!v) notPublishList << k }
    addFilter('filter') { artifact, file ->
      !(artifact.attributes.classifier in notPublishList)
    }
  }
}

// java properties setup
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:Brussels-SR2'
    mavenBom 'org.apache.logging.log4j:log4j-bom:2.8.2'
  }
}

ext {
  uuAppg01BinaryStoreVersion = "1.0.0-rc.2"
  uuAppg01ObjectStoreVersion = "1.0.0-rc.4"
  uuAppg01ServerVersion = "1.0.0-rc.4"
  uuAppg01WorkspaceVersion = "1.0.0-rc.4"
  uuAppg01OidcVersion = "1.0.0-rc.4"
}

configurations {
  all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
  compile project(':uu_demoappg01_main-client')

  compile("org.springframework.boot:spring-boot-starter-log4j2")

//  compile("uu.appg01.binarystore:uu_appg01_binarystore-dao:${uuAppg01BinaryStoreVersion}")
//  compile("uu.appg01.binarystore:uu_appg01_binarystore-mongodbdao:${uuAppg01BinaryStoreVersion}")
//  compile("uu.appg01.binarystore:uu_appg01_binarystore-server:${uuAppg01BinaryStoreVersion}")

//  compile("uu.appg01.core-server-java:uu_appg01_core-authentication:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-authorization:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-configuration:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-core:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-dto:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-exception:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-logging:${uuAppg01ServerVersion}")
//  compile("uu.appg01.core-server-java:uu_appg01_core-simple-cache:${uuAppg01ServerVersion}")
  compile("uu.appg01.core-server-java:uu_appg01_core-ucserver:${uuAppg01ServerVersion}")
  compile("uu.appg01.core-server-java:uu_appg01_core-uri:${uuAppg01ServerVersion}")
  compile("uu.appg01.core-server-java:uu_appg01_core-validation:${uuAppg01ServerVersion}")

//  compile("uu.appg01.core-client-java:uu_appg01_core-client:${uuAppg01ServerVersion}")

//  compile("uu.appg01.datastore:uu_appg01_datastore-datastore:${uuAppg01ObjectStoreVersion}")
//  compile("uu.appg01.datastore:uu_appg01_datastore-datastore:${uuAppg01ObjectStoreVersion}")
  compile("uu.appg01.datastore:uu_appg01_datastore-schema:${uuAppg01ObjectStoreVersion}")

  compile("uu.appg01.objectstore:uu_appg01_objectstore-datastore:${uuAppg01ObjectStoreVersion}")
  compile("uu.appg01.objectstore:uu_appg01_objectstore-mongodb:${uuAppg01ObjectStoreVersion}")
  compile("uu.appg01.objectstore:uu_appg01_objectstore-schema:${uuAppg01ObjectStoreVersion}")

//  compile("uu.appg01.workspace:uu_appg01_workspace-profiles:${uuAppg01WorkspaceVersion}")
//  compile("uu.appg01.workspace:uu_appg01_workspace-server:${uuAppg01WorkspaceVersion}")
//  compile("uu.appg01.workspace:uu_appg01_workspace-store:${uuAppg01WorkspaceVersion}")
//  compile("uu.appg01.workspace:uu_appg01_workspace_authorization:${uuAppg01WorkspaceVersion}")

//  compile("uu.oidcg01.client:uu_oidcg01-client-authentication-openid-client:${uuAppg01OidcVersion}")
  compile("uu.oidcg01.client:uu_oidcg01-client-authentication-uuoid:${uuAppg01OidcVersion}")
  compile("uu.oidcg01.client:uu_oidcg01-client-authentication-uuoid-handler:${uuAppg01OidcVersion}")

  testCompile("uu.appg01.core-server-java:uu_appg01_core-test_support:${uuAppg01ServerVersion}")
  compile("org.springframework.boot:spring-boot-starter-web")
}

bootRepackage {
  enabled = false
}

task uuRun(group: "uu", dependsOn: bootRun)

// testing with embedded MongoDb
mongo {
  System.setProperty("os.arch", "x86_64")
  //workarround for https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo/issues/167
  mongoVersion '3.4.3'
}

test {
  runWithMongoDb = true
}

// reports setup
buildDashboard {
  dependsOn(jacocoTestReport)
}

checkstyle {
  configFile = rootProject.file('config/checkstyle.xml')
  ignoreFailures = true
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled false
  }
}

task uuReport {
  group 'uu'
  buildDashboard.mustRunAfter check, jacocoTestReport
  dependsOn 'test', 'jacocoTestReport', 'check', 'buildDashboard'
}

// deployment to C3
war {
  archiveName = project.name + '.war'
}

uuDeploySettings {
  appBoxLocationUri = project.uuCloudAppBoxLocationUri
  resourcePoolUri = project.uuCloudResourcePoolUri
  shares = project.uuCloudShares
  if (project.hasProperty('uuCloudDeployParams') && project.uuCloudDeployParams) {
    deployConfig = project.uuCloudDeployParams
  }
}

// mapping and persistence json generation
task generateMappingJson(type: JavaExec) {
  main = 'uu.app.server.internal.generator.CommandMappingGenerator'
  classpath = sourceSets.main.runtimeClasspath
  args = ["-bp", "${uuSubAppPackageName}", "-vuc", "config/mapping-vuc.json", "-out", "${projectDir}/config/mapping.json"]
}

task copyMappingJsonToResources(type: Copy) {
  from "${projectDir}/config/mapping.json"
  into "${buildDir}/resources/main/config/"
}


task generatePersistenceJson(type: JavaExec) {
  main = 'uu.app.datastore.schema.PersistenceSchemaRunner'
  classpath = sourceSets.main.runtimeClasspath
  args = ["-bp", "${uuSubAppPackageName},uu.app", "-out", "config/persistence.json"]
}

processResources.doLast {
  tasks.generateMappingJson.execute()
  tasks.copyMappingJsonToResources.execute()
  tasks.generatePersistenceJson.execute()
}
